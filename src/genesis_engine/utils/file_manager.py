
"""
File management utilities for the Genesis Engine.
Handles project structure creation and file operations.
"""
import os
import shutil
from pathlib import Path
from typing import List, Optional

class FileManager:
    """Manages file operations for the Genesis Engine projects."""
    
    def setup_project_structure(self, project_path: Path) -> bool:
        """
        Create the basic project directory structure.
        
        Args:
            project_path: Path to the project directory
            
        Returns:
            bool: Success status
        """
        try:
            # Create main project directory
            project_path.mkdir(parents=True, exist_ok=True)
            
            # Create subdirectories
            subdirs = [
                "assets",
                "assets/images", 
                "assets/sounds",
                "game",
                "docs"
            ]
            
            for subdir in subdirs:
                (project_path / subdir).mkdir(parents=True, exist_ok=True)
            
            # Create __init__.py files for Python packages
            init_files = [
                "game/__init__.py",
            ]
            
            for init_file in init_files:
                init_path = project_path / init_file
                if not init_path.exists():
                    init_path.write_text('"""Generated by Genesis Engine."""\n')
            
            # Create a README.md template
            readme_content = self._generate_readme_template()
            readme_path = project_path / "README.md"
            readme_path.write_text(readme_content)
            
            return True
            
        except Exception as e:
            print(f"Error setting up project structure: {e}")
            return False
    
    def _generate_readme_template(self) -> str:
        """Generate a README template for the project."""
        return """# Genesis Engine Generated Game

This game was automatically generated by the AI Genesis Engine from a simple text prompt.

## How to Play

1. Make sure you have Python 3.7+ installed
2. Install pygame: `pip install pygame`
3. Run the game: `python main.py`

## Controls

- **Movement:** Arrow keys or WASD
- **Jump:** Spacebar, Up arrow, or W
- **Quit:** ESC or close window
- **Restart:** R (when game is over)

## Game Features

- Platformer mechanics with jumping and gravity
- Collectible items to gather
- Win/lose conditions
- Simple but engaging gameplay

## Technical Details

- **Engine:** Python + Pygame
- **Graphics:** Geometric shapes (easily replaceable)
- **Architecture:** Component-based design
- **Generated by:** Genesis Engine v1.0

---

*This entire game, including this README, was generated automatically by AI.*
"""
    
    def copy_template_files(self, project_path: Path, template_dir: Path) -> bool:
        """Copy template files to the project directory."""
        try:
            if not template_dir.exists():
                return True  # No templates to copy
            
            for item in template_dir.iterdir():
                if item.is_file():
                    shutil.copy2(item, project_path)
                elif item.is_dir():
                    shutil.copytree(item, project_path / item.name, dirs_exist_ok=True)
            
            return True
            
        except Exception as e:
            print(f"Error copying template files: {e}")
            return False
    
    def validate_project_structure(self, project_path: Path) -> tuple[bool, List[str]]:
        """
        Validate that the project has all required files.
        
        Returns:
            Tuple of (is_valid, list_of_missing_files)
        """
        required_files = [
            "main.py",
            "README.md",
            "GDD.md",
            "TECH_PLAN.md",
            "ASSETS.md"
        ]
        
        missing_files = []
        
        for file_name in required_files:
            if not (project_path / file_name).exists():
                missing_files.append(file_name)
        
        return len(missing_files) == 0, missing_files
    
    def cleanup_project(self, project_path: Path, keep_essentials: bool = True) -> bool:
        """Clean up project directory, optionally keeping essential files."""
        try:
            if not keep_essentials:
                shutil.rmtree(project_path)
                return True
            
            # Remove only temporary/cache files
            temp_patterns = [
                "*.pyc",
                "__pycache__",
                "*.tmp",
                ".DS_Store"
            ]
            
            for pattern in temp_patterns:
                for file_path in project_path.rglob(pattern):
                    if file_path.is_file():
                        file_path.unlink()
                    elif file_path.is_dir():
                        shutil.rmtree(file_path)
            
            return True
            
        except Exception as e:
            print(f"Error cleaning up project: {e}")
            return False
